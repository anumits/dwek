#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# $Id$
module Dwek
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 23)
  attr_accessor :mapper_list

  class MapperProxy
    def initialize(destination, mapper_type, assignment_list = [])
      @destination = destination.to_sym
      @mapper_type = mapper_type.to_sym
      @options = {}

      assignment_list.each do |assignment|
        @options.merge!(assignment.to_h)
      end
    end

    def to_mapper
      [@destination, @mapper_type.to_sym, @options]
    end
  end

  class Assignment
    def initialize(key, value)
      @key = key
      @value = value
    end

    def to_h
      { @key.to_sym => @value }
    end
  end

  def parse(string)
    @mapper_list = MapperList.new
    @tokens = make_tokens(string)
    do_parse
  end

  def make_tokens(string)
    result = []
    until string.empty?
      case string
      when /\A(?:\r\n|\r|\n)/
        result << [:NEWLINE, nil]
      when /\A\s+/
        # ignore non-newline whitespace
      when /\A\[(\w+)\]/
        result << [:MAPPER, $1]
      when /\A(?:isa|with|:|\[|\]|\,)/
        result << [$&, nil]
      when /\A\'(\w+)\'/, /\A\"(\w+)\"/
        result << [:STRING, $1]
      when /\A\w+/
        result << [:WORD, $&]
      else
        raise "can't recognize #{string.first(10)}"
      end
      string = $'
    end
    result << [false, '$end']
    result
  end

  def next_token
    @tokens.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    27,    17,    10,    20,    26,    12,    22,    28,    29,     8,
     3,    12,    12,     7,    17,    19,     6,    12,    12,     3,
     4,    30 ]

racc_action_check = [
    22,    13,     8,    19,    22,     8,    19,    25,    25,     6,
     0,    10,    11,     4,    16,    17,     3,    20,    21,     2,
     1,    29 ]

racc_action_pointer = [
     8,    20,    17,    13,    13,   nil,     5,   nil,    -3,   nil,
     3,     4,   nil,    -5,   nil,   nil,     8,     8,   nil,    -3,
     9,    10,    -6,   nil,   nil,    -3,   nil,   nil,   nil,    15,
   nil ]

racc_action_default = [
   -16,   -16,    -1,   -16,   -16,    -2,   -16,    31,   -16,    -3,
   -16,    -9,   -11,   -16,   -10,    -4,    -5,   -16,    -6,   -16,
   -16,   -16,   -16,    -7,    -8,   -16,   -13,   -14,   -12,   -16,
   -15 ]

racc_goto_table = [
     9,    15,    13,    14,    18,     1,    21,     5,    25,   nil,
   nil,   nil,    23,    24 ]

racc_goto_check = [
     3,     4,     3,     3,     4,     1,     6,     1,     8,   nil,
   nil,   nil,     3,     3 ]

racc_goto_pointer = [
   nil,     5,   nil,    -8,   -12,   nil,   -13,   nil,   -14 ]

racc_goto_default = [
   nil,   nil,     2,   nil,   nil,    16,   nil,    11,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  2, 13, :_reduce_none,
  4, 14, :_reduce_3,
  6, 14, :_reduce_4,
  1, 16, :_reduce_5,
  2, 16, :_reduce_6,
  4, 17, :_reduce_7,
  4, 17, :_reduce_8,
  1, 15, :_reduce_none,
  2, 15, :_reduce_none,
  1, 19, :_reduce_none,
  3, 18, :_reduce_12,
  2, 18, :_reduce_13,
  1, 20, :_reduce_14,
  3, 20, :_reduce_15 ]

racc_reduce_n = 16

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :WORD => 2,
  "isa" => 3,
  :MAPPER => 4,
  "with" => 5,
  :STRING => 6,
  ":" => 7,
  :NEWLINE => 8,
  "[" => 9,
  "]" => 10,
  "," => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "WORD",
  "\"isa\"",
  "MAPPER",
  "\"with\"",
  "STRING",
  "\":\"",
  "NEWLINE",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "$start",
  "mapping_list",
  "mapping",
  "linebreak_list",
  "assignment_list",
  "assignment",
  "array",
  "linebreak",
  "array_contents" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.y', 5)
  def _reduce_3(val, _values, result)
     @mapper_list.add_mapper(*MapperProxy.new(val[0], val[2]).to_mapper) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 6)
  def _reduce_4(val, _values, result)
     @mapper_list.add_mapper(*MapperProxy.new(val[0], val[2], val[5]).to_mapper) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_6(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_7(val, _values, result)
     result = Assignment.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_8(val, _values, result)
     result = Assignment.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_12(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_13(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_15(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Dwek
