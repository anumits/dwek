#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# $Id$
module Dwek
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 25)
  attr_accessor :mapper_list

  class MapperProxy
    def initialize(destination, mapper_type, assignment_list = [])
      @destination = destination.to_sym
      @mapper_type = mapper_type.to_sym
      @options = {}

      assignment_list.each do |assignment|
        @options.merge!(assignment.to_h)
      end
    end

    def to_mapper
      [@destination, @mapper_type.to_sym, @options]
    end
  end

  class Assignment
    def initialize(key, value)
      @key = key
      @value = value
    end

    def to_h
      { @key.to_sym => @value }
    end
  end

  def parse(string)
    @mapper_list = MapperList.new
    @current_line = 1
    @tokens = make_tokens(string)
    do_parse
  end

  def make_tokens(string)
    result = []
    until string.empty?
      case string
      when /\A(?:\r\n|\r|\n)/
        @current_line += 1
      when /\A\s+/
        # ignore non-newline whitespace
      when /\A#[^\r\n|\r|\n]+/
        # comments are ignored
      when /\A\{(\w+)\}/
        result << [:MAPPER, $1]
      when /\A(?:map|as|with|and|=|\[|\]|\,|;)/i
        result << [$&.upcase, nil]
      when /\A(\w+)/
        result << [:OPTION, $1]
      when /\A\'(\w+)\'/, /\A\"(\w+)\"/
        result << [:STRING, $1]
      else
        raise SyntaxError, "line #{@current_line}"
      end
      string = $'
    end
    result << [false, '$end']
    result
  end

  def next_token
    @tokens.shift
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    25,    12,    20,    26,    27,     8,     9,    10,    24,    22,
    11,     7,    15,    16,    17,    15,     4,     4,     5,    28 ]

racc_action_check = [
    22,    11,    17,    23,    23,     4,     5,     8,    22,    17,
    10,     3,    12,    14,    15,    16,     0,     2,     1,    27 ]

racc_action_pointer = [
    13,    18,    14,     9,     1,     6,   nil,   nil,     2,   nil,
     4,    -6,     3,   nil,     5,     4,     6,    -2,   nil,   nil,
   nil,   nil,    -4,    -9,   nil,   nil,   nil,    15,   nil ]

racc_action_default = [
   -15,   -15,    -1,   -15,   -15,   -15,    -2,    -3,   -15,    29,
   -15,    -4,   -15,    -5,    -6,   -15,   -15,   -15,    -7,    -8,
    -9,   -10,   -15,   -15,   -12,   -13,   -11,   -15,   -14 ]

racc_goto_table = [
    13,     1,    19,     6,    18,    21,    23 ]

racc_goto_check = [
     4,     1,     6,     1,     4,     7,     8 ]

racc_goto_pointer = [
   nil,     1,   nil,   nil,   -12,   nil,   -15,   -12,   -16 ]

racc_goto_default = [
   nil,   nil,     2,     3,   nil,    14,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_none,
  2, 15, :_reduce_none,
  2, 16, :_reduce_none,
  4, 17, :_reduce_4,
  6, 17, :_reduce_5,
  1, 18, :_reduce_6,
  3, 18, :_reduce_7,
  3, 19, :_reduce_8,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  3, 21, :_reduce_11,
  2, 21, :_reduce_12,
  1, 22, :_reduce_13,
  3, 22, :_reduce_14 ]

racc_reduce_n = 15

racc_shift_n = 29

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "MAP" => 3,
  :STRING => 4,
  "AS" => 5,
  :MAPPER => 6,
  "WITH" => 7,
  "AND" => 8,
  :OPTION => 9,
  "=" => 10,
  "[" => 11,
  "]" => 12,
  "," => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"MAP\"",
  "STRING",
  "\"AS\"",
  "MAPPER",
  "\"WITH\"",
  "\"AND\"",
  "OPTION",
  "\"=\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "$start",
  "configuration",
  "expression",
  "mapping",
  "assignment_list",
  "assignment",
  "assignment_value",
  "array",
  "array_contents" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
     @mapper_list.add_mapper(*MapperProxy.new(val[1], val[3]).to_mapper) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_5(val, _values, result)
     @mapper_list.add_mapper(*MapperProxy.new(val[1], val[3], val[5]).to_mapper) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_6(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_7(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_8(val, _values, result)
     result = Assignment.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_11(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_12(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_13(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_14(val, _values, result)
     result = val[0] + [val[2]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Dwek
